import streamlit as st
import plotly.graph_objects as go
import pandas as pd
from datetime import datetime, timedelta

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –∫—É—Ä—Å–∞
start_date = datetime(2025, 3, 24)
end_date = datetime(2025, 10, 10)
hours_per_day = 4
weekdays = {0, 1, 2, 3, 4}  # –†–∞–±–æ—á–∏–µ –¥–Ω–∏ (0 - –ü–Ω, 4 - –ü—Ç)

# –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–µ–∫—É—â—É—é –¥–∞—Ç—É
current_date = datetime.now()

# –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–µ–∫—É—â–∏–π —É—Ä–æ–≤–µ–Ω—å —è–∑—ã–∫–∞
levels = [
    ("A0", start_date),
    ("A1.1", start_date + timedelta(days=20)),
    ("A1.2", start_date + timedelta(days=40)),
    ("A2.1", start_date + timedelta(days=60)),
    ("A2.2", start_date + timedelta(days=80)),
    ("B1.1", start_date + timedelta(days=100)),
    ("B1.2", start_date + timedelta(days=120)),
    ("B1", end_date),
]

current_level = "A0"
for level, level_date in levels:
    if current_date >= level_date:
        current_level = level

# –ü–æ–ª–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —á–∞—Å–æ–≤ –∏ —Ä–∞—Å—á—ë—Ç –ø—Ä–æ–≥—Ä–µ—Å—Å–∞
total_hours = sum(hours_per_day for d in pd.date_range(start=start_date, end=end_date) if d.weekday() in weekdays)
past_hours = sum(hours_per_day for d in pd.date_range(start=start_date, end=min(current_date, end_date)) if d.weekday() in weekdays)
remaining_hours = total_hours - past_hours
progress = (past_hours / total_hours) * 100 if total_hours > 0 else 0

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –≤—ã—á–∏—Å–ª–µ–Ω–∏—è –≥—Ä–∞–¥–∏–µ–Ω—Ç–Ω–æ–≥–æ —Ü–≤–µ—Ç–∞
def interpolate_color(start_color, mid_color, end_color, progress):
    if progress < 50:
        r1, g1, b1 = start_color
        r2, g2, b2 = mid_color
        factor = progress / 50
    else:
        r1, g1, b1 = mid_color
        r2, g2, b2 = end_color
        factor = (progress - 50) / 50

    r = int(r1 + (r2 - r1) * factor)
    g = int(g1 + (g2 - g1) * factor)
    b = int(b1 + (b2 - b1) * factor)
    
    return f"rgb({r},{g},{b})"

# –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è –∫—É—Ä—Å–∞ (–µ—â—ë –Ω–µ –Ω–∞—á–∞–ª—Å—è, –∏–¥—ë—Ç, –∑–∞–≤–µ—Ä—à—ë–Ω)
if current_date < start_date:
    status_message = "–ö—É—Ä—Å –µ—â—ë –Ω–µ –Ω–∞—á–∞–ª—Å—è!"
    battery_color = "rgb(150, 150, 150)"  # –°–µ—Ä—ã–π —Ü–≤–µ—Ç
    battery_width = 5
    progress = 0
    remaining_hours = total_hours
    current_level = "A0"
elif current_date >= end_date:
    status_message = "–ö—É—Ä—Å –∑–∞–≤–µ—Ä—à—ë–Ω! –ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º! üéâ"
    battery_color = "rgb(76, 175, 80)"  # –ü–æ–ª–Ω–æ—Å—Ç—å—é –∑–µ–ª—ë–Ω—ã–π
    battery_width = 120  # –¢–µ–ø–µ—Ä—å —à–∏—Ä–∏–Ω–∞ –Ω–µ –ø—Ä–µ–≤—ã—à–∞–µ—Ç –≥—Ä–∞–Ω–∏—Ü—ã –±–∞—Ç–∞—Ä–µ–∏
    progress = 100
    remaining_hours = 0
    current_level = "B1"
else:
    status_message = f"–ò–∑—É—á–µ–Ω–∏–µ –∏–¥—ë—Ç! –û—Å—Ç–∞–ª–æ—Å—å {remaining_hours} —á–∞—Å–æ–≤."
    battery_color = interpolate_color((244, 67, 54), (255, 193, 7), (76, 175, 80), progress)
    battery_width = min(int(progress * 1.2), 120)  # –ì–∞—Ä–∞–Ω—Ç–∏—Ä—É–µ–º, —á—Ç–æ —à–∏—Ä–∏–Ω–∞ –Ω–µ –≤—ã–π–¥–µ—Ç –∑–∞ 120 –ø–∏–∫—Å–µ–ª–µ–π

# SVG-–∞–Ω–∏–º–∞—Ü–∏—è –±–∞—Ç–∞—Ä–µ–π–∫–∏
battery_svg = f"""
<svg width="150" height="80" viewBox="0 0 150 80">
    <rect x="5" y="15" width="120" height="50" rx="8" ry="8" stroke="black" stroke-width="3" fill="none"/>
    <rect x="125" y="30" width="10" height="20" fill="black"/>
    <rect x="10" y="20" width="{battery_width}" height="40" rx="5" ry="5" fill="{battery_color}" />
</svg>
"""

# –ò–Ω—Ç–µ—Ä—Ñ–µ–π—Å Streamlit
st.set_page_config(page_title="2025 - –ü—Ä–æ–≥—Ä–µ—Å—Å –∏–∑—É—á–µ–Ω–∏—è –Ω–µ–º–µ—Ü–∫–æ–≥–æ üá©üá™", layout="wide")

st.title("‚è≥ –ü—Ä–æ–≥—Ä–µ—Å—Å –∏–∑—É—á–µ–Ω–∏—è –Ω–µ–º–µ—Ü–∫–æ–≥–æ —è–∑—ã–∫–∞ üá©üá™")

col1, col2 = st.columns([1, 2])

with col1:
    st.metric(label="üìÖ –î–Ω–µ–π –¥–æ –æ–∫–æ–Ω—á–∞–Ω–∏—è", value=f"{max((end_date - current_date).days, 0)} –¥–Ω–µ–π")
    st.metric(label="üéì –¢–µ–∫—É—â–∏–π —É—Ä–æ–≤–µ–Ω—å", value=current_level)
    st.markdown(f'<div style="text-align: center;">{battery_svg}</div>', unsafe_allow_html=True)
    st.info(status_message)

with col2:
    if current_date < end_date:
        st.subheader(f"–û—Å—Ç–∞–ª–æ—Å—å {remaining_hours} —á–∞—Å–æ–≤ –∏–∑ {total_hours}")
        st.progress(progress / 100)

# –ì—Ä–∞—Ñ–∏–∫ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞ (–¥–æ—Ä–æ–∂–Ω–∞—è –∫–∞—Ä—Ç–∞)
fig = go.Figure()

fig.add_trace(go.Scatter(
    x=[lvl[1] for lvl in levels],
    y=[lvl[0] for lvl in levels],
    mode="lines+markers",
    line=dict(color="green", width=5),
    fill="tozeroy",
    name="–ü—Ä–æ–π–¥–µ–Ω–æ"
))

if current_date < end_date:
    fig.add_trace(go.Scatter(
        x=[lvl[1] for lvl in levels if lvl[1] > current_date],
        y=[lvl[0] for lvl in levels if lvl[1] > current_date],
        mode="lines+markers",
        line=dict(color="gray", width=2, dash="dash"),
        name="–û—Å—Ç–∞–ª–æ—Å—å"
    ))

fig.update_layout(
    title="üìà –ü—É—Ç—å –∫ B1: –û–∂–∏–¥–∞–µ–º—ã–π –ø—Ä–æ–≥—Ä–µ—Å—Å –∏–∑—É—á–µ–Ω–∏—è –Ω–µ–º–µ—Ü–∫–æ–≥–æ —è–∑—ã–∫–∞",
    xaxis_title="–î–∞—Ç–∞",
    yaxis_title="–£—Ä–æ–≤–µ–Ω—å —è–∑—ã–∫–∞",
    xaxis=dict(showgrid=False),
    yaxis=dict(showgrid=True, categoryorder="array", categoryarray=[lvl[0] for lvl in levels]),
    template="plotly_white",
    height=500
)

st.plotly_chart(fig)
